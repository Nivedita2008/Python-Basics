# -*- coding: utf-8 -*-
"""Data Types and structures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xBbQBqUufuzX-uBXXPRpNtXMmM_Bgtb-

# Data Types and Structures – Theory Q&A

1. What are data structures, and why are they important?
   - Data structures are ways of storing and organizing data in Python. Examples include list, tuple, string, set, and dictionary. They help in efficiently performing operations like searching, sorting, inserting, and deleting.
2. Explain the difference between mutable and immutable data types with examples.
  - Mutable: Can be changed after creation (e.g., list, set).
  - Immutable: Cannot be changed after creation (e.g., string, tuple).
3. What are the main differences between lists and tuples in Python?
  - List: Mutable, ordered, allows changes.
  - Tuple: Immutable, ordered, no changes allowed after creation.
4. Describe how dictionaries store data.
  - Dictionaries store data as key-value pairs.
     Example: person = {"name": "Nivedita", "age": 25, "city": "Nagod"}

5. Why might you use a set instead of a list?
  - Use a set to store only unique elements (removes duplicates automatically).

6. What is a string in Python, and how is it different from a list?
  - String: Immutable, sequence of characters.
  - List: Mutable, can contain any data type.

7. How do tuples ensure data integrity in Python?
  - Tuples are immutable, so the data cannot be changed after creation. This prevents accidental modification.

8. What is a hash table, and how does it relate to dictionaries in Python?
  - A hash table is a data structure that maps keys to values. Dictionaries use hash tables internally for fast access.

9. Can lists contain different data types in Python?
  - Yes. Example: my_list = [1, 2.3, "apple", True, 3+5j]

10. Explain why strings are immutable in Python.
  - Strings cannot be changed after creation. Example: string = "Hello"; string[0] = "h" → Error: strings are immutable.

11. What advantages do dictionaries offer over lists?
  - Dictionaries allow fast lookup using keys. They are useful when data is best described in key-value form.

12. Describe a scenario where using a tuple would be preferable over a list.
  - When you need to store fixed, unchangeable data like a date of birth or Aadhaar info:
  - example = ("Nivedita", "1234567890", "21-06-2000")

13. How do sets handle duplicate values?
  - Sets automatically remove duplicates. Example: set([1,2,2,3]) → {1,2,3}

14. How does the "in" keyword work differently for lists and dictionaries?
  - List: Checks for value existence
  - Dictionary: Checks for key existence

15. Can you modify elements of a tuple? Why or why not?
  - No. Tuples are immutable. You must convert it to a list to make changes.

16. What is a nested dictionary? Give an example.
  - A dictionary inside another dictionary.
  - Example: students = {"101": {"name": "Alice", "grade": "A"}}

17. Describe the time complexity of accessing elements in a dictionary.
  - Average time complexity is O(1) due to hashing.

18. In what situations are lists preferred over dictionaries?
  - When you need ordered data or indexed access, and key-value pairs are not required.

19. Why are dictionaries considered unordered, and how does that affect data retrieval?
  - Older versions of Python (before 3.7) did not preserve order.
     Now they do, but conceptually dictionaries are accessed via keys, not position.

20. Explain the difference between a list and a dictionary in terms of data retrieval.
  - List: Access via index → list[0]
  - Dictionary: Access via key → dict["name"]

#Practice Question
"""

# 1. Create a string with your name and print it
name = "Nivedita Pathak"
print(name)

# 2. Find the length of the string "Hello World"
string = "Hello World"
print(len(string))

# 3. Slice the first 3 characters from the string "Python Programming"
text = "Python Programming"
print(text[:3])

# 4. Convert the string "hello" to uppercase
print("hello".upper())

# 5. Replace the word "apple" with "orange" in the string "I like apple"
print("I like apple".replace("apple", "orange"))

# 6. Create a list with numbers 1 to 5 and print it
numbers = [1, 2, 3, 4, 5]
print(numbers)

# 7. Append the number 10 to the list [1, 2, 3, 4]
list1 = [1, 2, 3, 4]
list1.append(10)
print(list1)

# 8. Remove the number 3 from the list [1, 2, 3, 4, 5]
list2 = [1, 2, 3, 4, 5]
list2.remove(3)
print(list2)

# 9. Access the second element in the list ['a', 'b', 'c', 'd']
chars = ['a', 'b', 'c', 'd']
print(chars[1])

# 10. Reverse the list [10, 20, 30, 40, 50]
rev_list = [10, 20, 30, 40, 50]
rev_list.reverse()
print(rev_list)

# 11. Create a tuple with the elements 100, 200, 300 and print it
my_tuple = (100, 200, 300)
print(my_tuple)

# 12. Access the second-to-last element of the tuple ('red', 'green', 'blue', 'yellow')
colors = ('red', 'green', 'blue', 'yellow')
print(colors[-2])

# 13. Find the minimum number in the tuple (10, 20, 5, 15)
nums = (10, 20, 5, 15)
print(min(nums))

# 14. Find the index of the element "cat" in the tuple ('dog', 'cat', 'rabbit')
pets = ('dog', 'cat', 'rabbit')
print(pets.index('cat'))

# 15. Create a tuple containing three different fruits and check if "kiwi" is in it
fruits = ("mango", "kiwi", "apple")
print("kiwi" in fruits)

# 16. Create a set with the elements 'a', 'b', 'c' and print it
s = {'a', 'b', 'c'}
print(s)

# 17. Clear all elements from the set {1, 2, 3, 4, 5}
s = {1, 2, 3, 4, 5}
s.clear()
print(s)

# 18. Remove the element 4 from the set {1, 2, 3, 4}
s = {1, 2, 3, 4}
s.remove(4)
print(s)

# 19. Find the union of two sets {1, 2, 3} and {3, 4, 5}
s1 = {1, 2, 3}
s2 = {3, 4, 5}
print(s1.union(s2))

# 20. Find the intersection of two sets {1, 2, 3} and {2, 3, 4}
print({1, 2, 3}.intersection({2, 3, 4}))

# 21. Create a dictionary with the keys "name", "age", and "city", and print it
person = {"name": "Nivedita", "age": 25, "city": "Nagod"}
print(person)

# 22. Add a new key-value pair "country": "USA" to the dictionary
person = {'name': 'John', 'age': 25}
person["country"] = "USA"
print(person)

# 23. Access the value associated with the key "name" in the dictionary
d = {'name': 'Alice', 'age': 30}
print(d['name'])

# 24. Remove the key "age" from the dictionary
d = {'name': 'Bob', 'age': 22, 'city': 'New York'}
del d['age']
print(d)

# 25. Check if the key "city" exists in the dictionary
p = {'name': 'Alice', 'city': 'Paris'}
print("city" in p)

# 26. Create a list, a tuple, and a dictionary, and print them all
my_list = [1, 2.3, "tomato", "grapes"]
my_tuple = ("watermelon", "ladyfinger")
my_dict = {"Name": "Nivedita", "Age": 25}
print(my_list)
print(my_tuple)
print(my_dict)

# 27. Create a list of 5 random numbers between 1 and 100, sort it in ascending order, and print the result
import random
rand_nums = random.sample(range(1, 101), 5)
rand_nums.sort()
print(rand_nums)

# 28. Create a list with strings and print the element at the third index
veggies = ["potato", "tomato", "onion", "chilli"]
print(veggies[3])

# 29. Combine two dictionaries into one and print the result
p1 = {'name1': 'Alice', 'city1': 'Paris'}
p2 = {'name2': 'Arjun', 'city2': 'India'}
combined = {**p1, **p2}
print(combined)

# 30. Convert a list of strings into a set
fruits = ["potato", "orange", "tomato", "grapes"]
print(set(fruits))